##################################
# build script for football.db
#
# note:
#   uses (configured) for SQLite in-memory database
#      e.g. there's no BUILD_DIR (and database on the file system)
#


$RUBYLIBS_DEBUG = true

require 'json'

# 3rd party libs/gems
require 'worlddb/models'   ## todo/check: just require worlddb/models - why, why not??
require 'sportdb/models'   ## todo/check: just require sportdb/models - why, why not??
require 'logutils/activerecord' ## add db logging

# our own code
require './lib/rake'

require './settings'
require './lib/logs'
require './lib/standings'
require './lib/stats'
require './lib/team'

require './lib/sport'
require './lib/json'


##  todo: move to settings - why? why not?
JSON_REPO_PATH = "#{OPENFOOTBALL_ROOT}/football.json"   ## football.json repo path



## DB_CONFIG = {
##   adapter:   'sqlite3',
##   database:  ':memory:'
## }

###
# for testing/debuggin change to file

DB_CONFIG = {
  adapter:   'sqlite3',
  database:  './build/sport.db'
}



task :default => :build


###
##  fix/todo:
##   add clean??
##    deletes database if exists (on disk/as file)

task :env do
  pp DB_CONFIG
  ActiveRecord::Base.establish_connection( DB_CONFIG )

  db_adapter  = DB_CONFIG[ 'adapter' ]   || DB_CONFIG[ :adapter ]
  db_database = DB_CONFIG[ 'database' ]  || DB_CONFIG[ :database ]
  if db_adapter == 'sqlite3' && db_database != ':memory:'
    puts "*** sqlite3 database on filesystem; try speedup..."
    ## try to speed up sqlite
    ##   see http://www.sqlite.org/pragma.html
    c = ActiveRecord::Base.connection
    c.execute( 'PRAGMA synchronous=OFF;' )
    c.execute( 'PRAGMA journal_mode=OFF;' )
    c.execute( 'PRAGMA temp_store=MEMORY;' )
  end
end

task :config  => :env  do
  logger = LogUtils::Logger.root
  # logger.level = :info

  ## log all warns, errors, fatals to db
  LogDb.setup
  logger.warn "Rakefile - #{Time.now}"  # say hello; log to db (warn level min)
end

task :configworld => :config do
  logger = LogUtils::Logger.root
  logger.level = :info
end

task :configsport => :config do
  logger = LogUtils::Logger.root
  ## logger.level = :info
  logger.level = :debug
end


task :create => :env do
  SportDb.create_all
end


task :importworld => :configworld do
  # populate world tables
  #  use countries only for now (faster)
  WorldDb.read_setup( 'setups/countries', WORLD_DB_INCLUDE_PATH, skip_tags: true )
end

task :importbuiltin => :env do
  SportDb.read_builtin
end




#########################################################
# note: change deps to what you want to import for now

##
# default to worldcup (if no key given)
#
# e.g. use like
#  $ rake build  DATA=en
#  etc.


DATA_KEY = ENV['DATA'] || ENV['DATASET'] || 'all'
puts "  using DATA_KEY >#{DATA_KEY}<"

task :importsport => [:configsport, DATA_KEY.to_sym] do
  # nothing here
end

## note: :ru not working for now (fix date e.g. [])
task :all => [:at,:de,:en,:es,:it] do
end


task :recalc => ["recalc_#{DATA_KEY}".to_sym] do    ## e.g. recalc_at etc.
  # nothing here
end

## note: :ru not working for now (fix date e.g. [])
task :recalc_all => [:recalc_at,:recalc_de,:recalc_en,:recalc_es,:recalc_it] do
end


desc 'build football.db from scratch (default)'
task :build => [:create, :importworld, :importsport] do
  puts 'Done.'
end



task :stats => :env  do
  puts build_stats
  puts 'Done.'
end

task :logs => :env do
  out_root = debug? ? './build' : '../logs/football.db'   ## todo: use const for ../logs ???

  save_logs( out_root: out_root )
  puts 'Done.'
end



############################################
# add more tasks (keep build script modular)
load_tasks()
